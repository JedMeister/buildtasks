#!/bin/bash -e
# depends: qemu grub2 parted kpartx zip ovftool
# Copyright (c) 2011-2015 TurnKey GNU/Linux - http://www.turnkeylinux.org
# 
# This file is part of buildtasks.
# 
# Buildtasks is free software; you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.


fatal() { echo "FATAL [$(basename $0)]: $@" 1>&2; exit 1; }
info() { echo "INFO [$(basename $0)]: $@"; }

usage() {
cat<<EOF
Syntax: $0 rootfs
Bundles rootfs into VM optimized builds (vmdk and ovf)

Arguments::

    rootfs          - root filesystem path

Environment::

    VM_URL        - Product URL ($VM_URL)
    VM_MEMORY     - Amount of memory - integer ($VM_MEMORY)
    VM_FULLNAME   - Display name of image ($VM_FULLNAME)
    VM_GUESTOS    - Guest OS of image ($VM_GUESTOS)

EOF
exit 1
}

if [[ "$#" != "1" ]]; then
    usage
fi

rootfs=$1
full_name=$(echo $rootfs | sed 's/.rootfs//')
name=$(basename $full_name)
BASE_DIR=$(dirname $full_name)

[ -n "$VM_URL" ] || fatal "VM_URL not set"
[ -n "$VM_MEMORY" ] || fatal "VM_MEMORY not set"
[ -n "$VM_FULLNAME" ] || fatal "VM_FULLNAME not set"
[ -n "$VM_GUESTOS" ] || fatal "VM_GUESTOS not set"

# image size consts.
VM_SIZE="20G"
VM_PARTED_BOOT="63 512"      #  0.5GB
VM_PARTED_LVM="513 20000"   # 19.5GB (free: 2GB)
VM_PARTED_LVM_ROOT="17GB"
VM_PARTED_LVM_SWAP="512MB"

#VM_SIZE="1G"
#VM_PARTED_BOOT="0 50"       #  50MB
#VM_PARTED_LVM="51 1000"     # 950MB (free: 100MB)
#VM_PARTED_LVM_ROOT="800MB"
#VM_PARTED_LVM_SWAP="50MB"

VG=turnkey
[ -e /dev/$VG ] && VG=turnkeyvm
[ -e /dev/$VG ] && fatal "VG exists: $VG"
info "using volume group: $VG"

info "creating raw image ($VM_SIZE sparse) and partitions"
qemu-img create -f raw $rootfs.raw $VM_SIZE
parted --script $rootfs.raw mklabel msdos
parted --script -- $rootfs.raw mkpart primary $VM_PARTED_BOOT
parted --script -- $rootfs.raw mkpart primary $VM_PARTED_LVM
parted --script -- $rootfs.raw set 1 boot on
parted --script -- $rootfs.raw set 2 LVM on

info "setting up loop device and LVM"
kpartx -as $rootfs.raw
loopdev=$(kpartx -l $rootfs.raw | grep p1 | sed 's|p1.*||')

pvcreate /dev/mapper/${loopdev}p2
vgcreate $VG /dev/mapper/${loopdev}p2
lvcreate -Z y -L $VM_PARTED_LVM_ROOT -n root $VG
lvcreate -Z y -L $VM_PARTED_LVM_SWAP -n swap_1 $VG
vgscan
vgchange -a y

info "creating filesystems (boot, root, swap)"
mkfs.ext2 /dev/mapper/${loopdev}p1
mkfs.ext4 /dev/mapper/$VG-root
mkswap /dev/mapper/$VG-swap_1

info "mounting raw root partition and syncing rootfs, removing boot/*"
mkdir $rootfs.fs
mount /dev/mapper/$VG-root $rootfs.fs
mkdir -p $rootfs.fs/boot
mount /dev/mapper/${loopdev}p1 $rootfs.fs/boot
rsync -a -t -r -S -I -H $rootfs/ $rootfs.fs

info "mount binding dev and proc"
mount --bind --make-rslave /dev $rootfs.fs/dev
mount --bind --make-rslave /sys $rootfs.fs/sys
mount --bind --make-rslave /proc $rootfs.fs/proc

info "installing and configuring grub"
devicemap=$rootfs.fs/boot/grub/device.map

cat > $devicemap <<EOF
(hd0)   /dev/${loopdev}
EOF

info "temp device map:"
cat $devicemap

chroot $rootfs.fs grub-mkconfig -o /boot/grub/grub.cfg
grub-install --force --root-directory=$rootfs.fs /dev/$loopdev

info "tweaking grub settings"
UUID_BOOT=$(blkid -o value -s UUID /dev/mapper/${loopdev}p1)
UUID_ROOT=$(blkid -o value -s UUID /dev/mapper/$VG-root)
cat > $devicemap <<EOF
(hd0)   UUID=$UUID_BOOT
(hd1)   UUID=$UUID_ROOT
EOF

info "creating fstab"
fstab="$rootfs.fs/etc/fstab"
echo -e "proc\t\t\t/proc\tproc\tnodev,noexec,nosuid\t0\t0" > $fstab
echo -e "/dev/mapper/$VG-root\t/\text4\terrors=remount-ro\t0\t1" >> $fstab
echo -e "UUID=$UUID_BOOT\t/boot\text2\tdefaults\t0\t2" >> $fstab
echo -e "/dev/mapper/$VG-swap_1\tnone\tswap\tsw\t0\t0" >> $fstab

info "umounting the jumble..."
umount $rootfs.fs/proc
grep $rootfs.fs/sys /proc/mounts | cut -f2 -d" " | sort -r | xargs umount -n
umount $rootfs.fs/dev
umount $rootfs.fs/boot
umount $rootfs.fs/
rm -rf $rootfs.fs

info "converting raw image to vmdk"
qemu-img convert -f raw $rootfs.raw -O vmdk -o compat6 $name.vmdk

info "cleaning up"
lvremove -f /dev/$VG/root
lvremove -f /dev/$VG/swap_1
vgremove -f /dev/$VG
vgscan
vgchange -a y
rm -f /etc/lvm/backup/$VG

kpartx -d $rootfs.raw
rm -f $rootfs.raw

info "creating vmx"
cat > $name.vmx<<EOF 
#!/usr/bin/vmware
config.version = "8"
virtualHW.version = "7"
memsize = "$VM_MEMORY"
Ethernet0.present = "TRUE"
Ethernet0.connectionType = "bridged"
displayName = "$VM_FULLNAME"
annotation = "$VM_URL"
guestinfo.vmware.product.long = "$VM_FULLNAME"
guestinfo.vmware.product.url = "$VM_URL"
guestinfo.vmware.product.class = "virtual machine"
guestOS = "$VM_GUESTOS"
priority.grabbed = "normal"
priority.ungrabbed = "normal"
usb.present = "TRUE"
tools.syncTime = "TRUE"
usb.generic.autoconnect = "TRUE"
powerType.powerOff = "hard"
powerType.powerOn = "hard"
powerType.suspend = "hard"
powerType.reset = "hard"
floppy0.present = "FALSE"
scsi0.present = "TRUE"
scsi0.virtualDev = "lsilogic"
scsi0:0.deviceType = "disk"
scsi0:0.present = "TRUE"
scsi0:0.fileName = "$name.vmdk"
scsi0:0.mode = "persistent"
scsi0:0.startConnected = "TRUE"
scsi0:0.writeThrough = "TRUE"
ide1:0.present = "TRUE"
ide1:0.deviceType = "cdrom-raw"
ide1:0.startConnected = "TRUE"
ide1:0.fileName = "auto detect"
ide1:0.autodetect = "TRUE"
EOF

info "setting up image directory"
mkdir $name
mv $name.vmx $name.vmdk $name/

cat > $name/README.txt <<EOF
For virtualization specific documentation, please refer to:
http://www.turnkeylinux.org/docs/virtualization
EOF

chown -R root:root $name
chmod 600 $name/*
chmod 644 $name/*.vmx

info "creating ovf"
cd $full_name
ovftool $name.vmx $name.ovf

info "tweaking ovf & generating ova"

# fix vm name (otherwise defaults to "vm" in VBox)
sed -i "/VirtualSystem ovf:id/ s|=\".*|=\"$VM_FULLNAME\">|" $name.ovf

# fix OSType: 102 = "other64" (1 = other)
sed -i "/OperatingSystemSection ovf:id/ s|\"1\".*|\"102\">|" $name.ovf

# update SHA of fixed ovf
SHA=$(openssl sha1 $name.ovf)
sed -i "s|.*$name.ovf.*|$SHA|" $name.mf

ovftool $name.ovf ../$name.ova
rm $name.vmdk
cd ../
info "zipping archive"
zip -r -T $name-vmdk-ovf.zip $name

if [ -z "$BT_DEBUG" ]; then
    info "performing final cleanup"
    rm -rf $name
    rm -f $rootfs.raw
fi

